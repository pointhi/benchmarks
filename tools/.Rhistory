option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
if(isTRUE(outputfile_arg)) {
option_list <- c(option_list,
make_option(c("-o", "--outputfile"), type="character", default=NA,
help="name of the output", metavar="character"));
}
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
# parse arguments and check for errors in them
parse_script_args <- function(outputfile_arg) {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
if(isTRUE(outputfile_arg)) {
option_list <- c(option_list,
make_option(c("-o", "--outputfile"), type="character", default=NA,
help="name of the output", metavar="character"));
}
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_args(TRUE)
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
option_list <- c(option_list,
make_option(c("-o", "--outputfile"), type="character", default=NA,
help="name of the output", metavar="character"));
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
library(tidyverse)
library(jsonlite)
library(optparse)
# parse arguments and check for errors in them
parse_script_args <- function(outputfile_arg) {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
if(isTRUE(outputfile_arg)) {
option_list <- c(option_list,
make_option(c("-o", "--outputfile"), type="character", default=NA,
help="name of the output", metavar="character"));
}
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_args(TRUE)
options(error=recover)
# parse arguments and check for errors in them
parse_script_args <- function(outputfile_arg) {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
if(isTRUE(outputfile_arg)) {
option_list <- c(option_list,
make_option(c("-o", "--outputfile"), type="character", default=NA,
help="name of the output", metavar="character"));
}
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_args(TRUE)
# parse arguments and check for errors in them
parse_script_args <- function(outputfile_arg) {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
#if(isTRUE(outputfile_arg)) {
#  option_list <- c(option_list,
#                   make_option(c("-o", "--outputfile"), type="character", default=NA,
#                               help="name of the output", metavar="character"));
#}
opt_parser = OptionParser(option_list=option_list);
stop('asdf')
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_args(TRUE)
# parse arguments and check for errors in them
parse_script_args <- function() {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
#if(isTRUE(outputfile_arg)) {
#  option_list <- c(option_list,
#                   make_option(c("-o", "--outputfile"), type="character", default=NA,
#                               help="name of the output", metavar="character"));
#}
opt_parser = OptionParser(option_list=option_list);
stop('asdf')
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_args()
0
0
0
exit
stop()
options(error=recover)
library(tidyverse)
library(jsonlite)
library(optparse)
#options(error=recover)
# parse arguments and check for errors in them
parse_script_args <- function() {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
#if(isTRUE(outputfile_arg)) {
#  option_list <- c(option_list,
#                   make_option(c("-o", "--outputfile"), type="character", default=NA,
#                               help="name of the output", metavar="character"));
#}
opt_parser = OptionParser(option_list=option_list);
stop('asdf')
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_args()
install.packages("argparse")
#options(error=recover)
# parse arguments and check for errors in them
parse_script_args <- function() {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
#if(isTRUE(outputfile_arg)) {
#  option_list <- c(option_list,
#                   make_option(c("-o", "--outputfile"), type="character", default=NA,
#                               help="name of the output", metavar="character"));
#}
opt_parser = OptionParser(option_list=option_list);
stop('asdf')
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_script_args()
#options(error=recover)
# parse arguments and check for errors in them
parse_script_args <- function() {
option_list = list(
make_option(c("-b", "--benchfile"), type="character", default=NA,
help="preprocessed .json file to plot", metavar="character"),
make_option(c("-r", "--base-runtime"), type="character", default=NA,
help="runtime which specifies the base", metavar="character")
);
#if(isTRUE(outputfile_arg)) {
#  option_list <- c(option_list,
#                   make_option(c("-o", "--outputfile"), type="character", default=NA,
#                               help="name of the output", metavar="character"));
#}
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
args <- list()
# check benchfile is provided
if (!is.na(opt$benchfile)) {
if(!file.exists(opt$benchfile)) {
stop("--benchfile file does not exist!", opt$benchfile)
}
# read url and convert to data.frame
args[['raw']] <- fromJSON(txt=opt$benchfile)
} else {
stop("--benchfile parameter must be provided. See script usage (--help)")
}
if (!is.na(opt$'base-runtime')) {
args[['base_runtime']] <- opt$'base-runtime'
} else {
stop("--base-runtime parameter must be provided. See script usage (--help)")
}
if(outputfile_arg == TRUE) {
args[['outputfile']] <- opt$outputfile
}
return(args);
}
parse_script_args()
parse_data <- function(raw) {
if ("benchmark_data" %in% names(raw)) {
benchmark_data = raw[['benchmark_data']]
} else {
benchmark_data = raw  # support old format as well
}
df = flatten_data(benchmark_data)
print("runtimes in the dataset:")
df$config %>% unique()
return(df)
}
library(tidyverse)
library(jsonlite)
library(optparse)
source('util.R')
getwd()
getwd()
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
dirname(sys.frame(0)$ofile)
script.dir <- dirname(sys.frame(1)$ofile)
source('./util.R')
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
PATH <- dirname(frame_files[[length(frame_files)]])
source_local <- function(fname){
argv <- commandArgs(trailingOnly = FALSE)
base_dir <- dirname(substring(argv[grep("--file=", argv)], 8))
source(paste(base_dir, fname, sep="/"))
}
source_local()
source('./util.R', chdir = T)
source('util.R', chdir=TRUE)
source('util.R', chdir=TRUE)
wd <- setwd(".")
setwd(wd)
getwd()
this.file <- sys.frame(tail(grep('source',sys.calls()),n=1))$ofile
this.dir <- dirname(this.file)
LocationOfThisScript = function() # Function LocationOfThisScript returns the location of this .R script (may be needed to source other files in same dir)
{
this.file = NULL
# This file may be 'sourced'
for (i in -(1:sys.nframe())) {
if (identical(sys.function(i), base::source)) this.file = (normalizePath(sys.frame(i)$ofile))
}
if (!is.null(this.file)) return(dirname(this.file))
# But it may also be called from the command line
cmd.args = commandArgs(trailingOnly = FALSE)
cmd.args.trailing = commandArgs(trailingOnly = TRUE)
cmd.args = cmd.args[seq.int(from=1, length.out=length(cmd.args) - length(cmd.args.trailing))]
res = gsub("^(?:--file=(.*)|.*)$", "\\1", cmd.args)
# If multiple --file arguments are given, R uses the last one
res = tail(res[res != ""], 1)
if (0 < length(res)) return(dirname(res))
# Both are not the case. Maybe we are in an R GUI?
return(NULL)
}
loc = LocationOfThisScript()
commandArgs(trailingOnly = TRUE)
commandArgs(trailingOnly = TRUE)
a = commandArgs(trailingOnly = TRUE)
a = commandArgs(trailingOnly = FALSE)
source("/Users/me/test/mother.R", chdir = TRUE)
dirname('util.R')
dirname('autil.R')
dirname('util.R')
dirname('util.R')
install.packages("modules")
library(modules)
import('util')
import('util.R')
import('./util.R')
import('util.R', attach = TRUE)
import('optparse', attach = TRUE)
install.packages("rprojroot")
rprojroot::is_r_package
library(rprojroot)
rprojroot::is_r_package
rprojroot::has_file(".git/index")
rprojroot::has_file("util.R")
install.packages("here")
library(here)
here()rprojroot::has_file("util.R")
here()
here('util.R')
devtools::install_github('klmr/modules')
library(modules)
import('util.R', attach = TRUE)
import('util.R', attach = TRUE)
detach("package:here", unload=TRUE)
install.packages("modules")
library(modules, warn.conflicts=FALSE)  # installed with devtools::install_github('klmr/modules')
util = import('util')
devtools::install_github('klmr/modules')
install.packages("tidyverse", repos="http://cran.rstudio.com/")
install.packages("tidyverse", repos = "http://cran.rstudio.com/")
install.packages("jsonlite", repos = "http://cran.rstudio.com/")
install.packages("jsonlite", repos = "http://cran.rstudio.com/")
devtools::install_github('klmr/modules', ref='version-0.9.10')
devtools::install_github('klmr/modules', ref='version-0.9.8.1')
devtools::install_github('klmr/modules', ref='version-0.9.10')
packages <- c('tidyverse', 'optparse', 'devtools', 'jsonlite')
cran_repos <- 'http://cran.rstudio.com/'
ncpus <- 8
install.packages(packages, repos=cran_repos, Ncpus=ncpus)
install.packages(packages, repos = cran_repos, Ncpus = ncpus)
install.packages(packages, repos=cran_repos, Ncpus=ncpus, clean=TRUE)
install.packages(packages, repos = cran_repos, Ncpus = ncpus, clean = TRUE)
install.packages(packages, repos=cran_repos, Ncpus=ncpus, clean=TRUE, quick=TRUE)
install.packages(packages, repos = cran_repos, Ncpus = ncpus, clean = TRUE, quick = TRUE)
# modules
devtools::install_github('klmr/modules', ref='version-0.9.10', quick=TRUE, threads=ncpus)
library(tidyverse)
library(modules, warn.conflicts=FALSE)
util = import('util')
setwd("~/JKU/benchmarks/tools")
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
# parse commandline arguments
args <- util$parse_script_args(FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
# parse commandline arguments
args <- util$parse_script_args(FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
library(tidyverse)
library(modules, warn.conflicts=FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
library(tidyverse)
library(modules, warn.conflicts=FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
library(tidyverse)
library(modules, warn.conflicts=FALSE)
util = import('util')
# parse commandline arguments
args <- util$parse_script_args(FALSE)
